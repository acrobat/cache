language: php
sudo: required
dist: xenial
env:
  global:
    - COVERAGE=false

branches:
  except:
    - /^analysis-.*$/
    - /^patch-.*$/

matrix:
    fast_finish: true
    include:
#      - php: 7.2
#        env: deps="low"
#      - php: 7.4
#        env: deps="high"
#      - php: 7.4
#        env: COVERAGE=true
#      - php: 7.2
#      - php: 7.3
      - php: 8.0snapshot

services:
    - redis
    - memcached
    - mongodb

addons:
  apt:
    sources:
      - mongodb-3.2-trusty
    packages:
      - parallel
      - mongodb-org-server

cache:
    directories:
      - "$HOME/.composer/cache"

before_install:
    - if [[ $COVERAGE == false ]]; then phpenv config-rm xdebug.ini || true; fi
    - mkdir -p ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d
    - ./build/php/all.sh
    - ./build/RedisClusterSetup.sh
    - sleep 5 # To make sure all services installed and running
    - |
      # General configuration
      stty cols 120
      PHP=$TRAVIS_PHP_VERSION
      [ -d ~/.composer ] || mkdir ~/.composer
      export PHPUNIT=$(readlink -f ./phpunit)
      export PHPUNIT_X="$PHPUNIT --exclude-group benchmark"
      export PHPUNIT_COVERAGE="$PHPUNIT_X --coverage-clover=coverage.xml"
      export COMPOSER_UP='composer update --no-progress --no-suggest --ansi --prefer-dist'

      # tfold is a helper to create folded reports
      tfold () {
          title=$1
          fold=$(echo $title | sed -r 's/[^-_A-Za-z\d]+/./g')
          shift
          echo -e "travis_fold:start:$fold\\n\\e[1;34m$title\\e[0m"
          bash -xc "$*" 2>&1 &&
              echo "########################################" &&
              echo "########################################" &&
              echo -e "\\e[32mOK\\e[0m $title\\n\\ntravis_fold:end:$fold" ||
              ( echo -e "\\e[41mKO\\e[0m $title\\n" && exit 1 )
      }
      export -f tfold

      COMPONENTS=$(find src -mindepth 2 -type f -name phpunit.xml.dist -printf '%h\n')

      # php.ini configuration
      INI=~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
      echo memory_limit = -1 >> $INI

      # tpecl is a helper to compile and cache php extensions
      tpecl () {
          local ext_name=$1
          local ext_so=$2
          local INI=$3
          local input=${4:-yes}
          local ext_dir=$(php -r "echo ini_get('extension_dir');")
          local ext_cache=~/php-ext/$(basename $ext_dir)/$ext_name
          if [[ -e $ext_cache/$ext_so ]]; then
          echo extension = $ext_cache/$ext_so >> $INI
          else
          rm ~/.pearrc /tmp/pear 2>/dev/null || true
          mkdir -p $ext_cache
          echo $input | pecl install -f $ext_name &&
          cp $ext_dir/$ext_so $ext_cache
          fi
        }
      export -f tpecl

    - |
      # Install extra PHP extensions
      for PHP in $TRAVIS_PHP_VERSION $php_extra; do
          export PHP=$PHP
          phpenv global $PHP
          composer self-update
          composer self-update --2
          INI=~/.phpenv/versions/$PHP/etc/conf.d/travis.ini
          if ! php --ri sodium > /dev/null; then
              tfold ext.libsodium tpecl libsodium sodium.so $INI
          fi
          if [[ $PHP = 8.* ]]; then
              tfold ext.memcached tpecl memcached-3.1.5 memcached.so $INI
          else
              tfold ext.mongodb tpecl mongodb-1.6.16 mongodb.so $INI
          fi
          tfold ext.apcu tpecl apcu-5.1.19 apcu.so $INI
          tfold ext.redis tpecl redis-5.2.3 redis.so $INI "no"
      done

install:
  - if [[ ! $skip ]]; then $COMPOSER_UP; fi
  - |
    run_tests () {
        set -e
        if [[ $skip ]]; then
            echo -e "\\n\\e[1;34mIntermediate PHP version $PHP is skipped for pull requests.\\e[0m"
        elif [[ $deps = high ]]; then
            echo "$COMPONENTS" | parallel --gnu -j10% "tfold {} 'cd {} && $COMPOSER_UP && $PHPUNIT_X$LEGACY'"
        elif [[ $deps = low ]]; then
            sleep 3
            echo "$COMPONENTS" | parallel --gnu -j10% "tfold {} 'cd {} && $COMPOSER_UP --prefer-lowest --prefer-stable && $PHPUNIT_X'"
        elif [[ $COVERAGE == true ]]; then
            $PHPUNIT_COVERAGE
        else
            echo "$COMPONENTS" | parallel --gnu "tfold {} $PHPUNIT_X {}"
            tfold tty-group $PHPUNIT --group tty
        fi
    }

script:
    - (run_tests)

after_success:
    - if [[ $COVERAGE  == true ]]; then pip install --user codecov && codecov ; fi

notifications:
    email: false
    webhooks:
        urls:
            - https://webhooks.gitter.im/e/7b0035a70de31fa976df
